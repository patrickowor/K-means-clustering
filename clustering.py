# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colaboratory.
"""

import warnings
warnings.filterwarnings('ignore')

# import the neccessary modules
import pandas as pd
import numpy as np

# importing pyplot for displaying the dataset
import matplotlib.pyplot as plt

import statsmodels.api as sm
import seaborn as sns
sns.set()
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# reading the dataset
df = pd.read_csv("https://canvas.wlv.ac.uk/courses/41905/files/6902595/download?download_frd=1&verifier=XVh1Te1okB5mOIJ61WfxbE8p5Gnz2TydrBmuNqII")
df.head()

# getting sum of empty rows in dataset

print(df.isna().sum())

# checking for duplicate on the dataset
df.duplicated()

# getting the info of the dataset
print(df.info(verbose=True))

# getting final description of the data
df.describe()

df.shape

# # Visualize the correlation your data and identify variables for further analysis
g = sns.PairGrid(df)
g.map(sns.scatterplot)

# declaring the features and the target
X = df


# Extract the 'country' column for labeling later
y_names = df['country']

# Drop the 'country' column for clustering
X = df.drop(['country'], axis=1)

X

# using elbow method to find the best number of clusters
from sklearn.cluster import KMeans
cs = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(X)
    cs.append(kmeans.inertia_)
plt.plot(range(1, 11), cs)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('CS')
plt.show()

# training the model

kmeans = KMeans(n_clusters=2, random_state=0)
identified_clusters = kmeans.fit_predict(X)
identified_clusters

data = df.copy()
# Adding the cluster labels to the original dataset
data['cluster'] = identified_clusters

# Visualising the clusters using pairplots or other relevant plots
sns.pairplot(data, hue='cluster', diag_kind='kde')
plt.show()

# Analysing the means of each cluster for different features
cluster_means = data.groupby('cluster').mean()
print(cluster_means)

kmeans.cluster_centers_

labels = kmeans.labels_
labels

print("Inertia:", kmeans.inertia_)